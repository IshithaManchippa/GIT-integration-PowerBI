{
  "$schema": "https://developer.microsoft.com/json-schemas/fabric/item/report/definition/visualContainer/2.1.0/schema.json",
  "name": "a4c20f303a8801890569",
  "position": {
    "x": 0,
    "y": 0,
    "z": 1000,
    "height": 718.24817518248176,
    "width": 1278.8321167883212,
    "tabOrder": 1001
  },
  "visual": {
    "visualType": "pythonVisual",
    "query": {
      "queryState": {
        "Values": {
          "projections": [
            {
              "field": {
                "Column": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "Root Cause"
                    }
                  },
                  "Property": "RootCauseName"
                }
              },
              "queryRef": "Root Cause.RootCauseName",
              "nativeQueryRef": "RootCauseName"
            },
            {
              "field": {
                "Measure": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "QCMS_DEFECTS"
                    }
                  },
                  "Property": "Unique Tickets Count"
                }
              },
              "queryRef": "QCMS_DEFECTS.Unique Tickets Count",
              "nativeQueryRef": "Unique Tickets Count"
            },
            {
              "field": {
                "Column": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "QCMS_DEFECTS"
                    }
                  },
                  "Property": "Title"
                }
              },
              "queryRef": "QCMS_DEFECTS.Title",
              "nativeQueryRef": "Title"
            }
          ]
        }
      },
      "sortDefinition": {
        "sort": [
          {
            "field": {
              "Column": {
                "Expression": {
                  "SourceRef": {
                    "Entity": "Root Cause"
                  }
                },
                "Property": "RootCauseName"
              }
            },
            "direction": "Ascending"
          }
        ],
        "isDefaultSort": true
      }
    },
    "objects": {
      "script": [
        {
          "properties": {
            "source": {
              "expr": {
                "Literal": {
                  "Value": "'# The following code to create a dataframe and remove duplicated rows is always executed and acts as a preamble for your script: \n\n# dataset = pandas.DataFrame(undefined, undefined.1)\n# dataset = dataset.drop_duplicates()\n\n# Paste or type your script code here:\n# ''dataset'' is the default input table in Power BI Python script step\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Convert to string and strip whitespaces\ndataset[''Title''] = dataset[''Title''].fillna(\"\").astype(str).str.lower()\ndataset[''RootCauseName''] = dataset[''RootCauseName''].astype(str).str.strip()\n\n# Replace visually blank or misleading entries with real NaN\ndataset[''RootCauseName''] = dataset[''RootCauseName''].replace([\"\", \"nan\", \"NaN\", \"None\", \"none\", \"N/A\"], pd.NA)\n\n# Define inference function\ndef infer_category(title):\n    if any(word in title for word in [\"login\", \"authentication\", \"sign in\"]):\n        return \"Login Issue\"\n    elif any(word in title for word in [\"setup\", \"configuration\", \"preference\"]):\n        return \"Setup Issue\"\n    elif any(word in title for word in [\"data\", \"value\", \"missing\"]):\n        return \"Data Issue\"\n    elif any(word in title for word in [\"display\", \"alignment\", \"screen\"]):\n        return \"UI/UX Issue\"\n    else:\n        return \"Miscellaneous\"\n\n# Apply logic: only infer when rootcause is really missing\ndataset[''RootCause_Final''] = dataset.apply(\n    lambda row: infer_category(row[''Title'']) if pd.isna(row[''RootCauseName'']) else row[''RootCauseName''],\n    axis=1\n)\n\n# Group and count\nrootcause_counts = dataset[\"RootCause_Final\"].value_counts().reset_index()\nrootcause_counts.columns = [\"Root Cause\", \"Ticket Count\"]\n\n# Plot\nplt.figure(figsize=(10, 5))\nbars = plt.barh(rootcause_counts[\"Root Cause\"], rootcause_counts[\"Ticket Count\"], color=\"skyblue\")\n\n# Add data labels\nfor bar in bars:\n    width = bar.get_width()\n    label_x = width - 5 if width > 20 else width + 0\n    ha = ''right'' if width > 20 else ''left''\n    plt.text(label_x, bar.get_y() + bar.get_height()/2, str(int(width)), va=''center'', ha=ha, fontsize=9)\n\nplt.xlabel(\"Ticket Count\")\nplt.ylabel(\"Root Cause\")\nplt.title(\"Ticket Count by Root Cause (Final Logic with True Blanks Only)\")\nplt.gca().invert_yaxis()\nplt.tight_layout()\nplt.show()\n\n'"
                }
              }
            },
            "provider": {
              "expr": {
                "Literal": {
                  "Value": "'Python'"
                }
              }
            }
          }
        }
      ]
    },
    "visualContainerObjects": {
      "title": [
        {
          "properties": {
            "show": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "text": {
              "expr": {
                "Literal": {
                  "Value": "'Most Frequent Ticket by Rootcause'"
                }
              }
            }
          }
        }
      ]
    },
    "drillFilterOtherVisuals": true
  }
}